diff -urP pydot-1.0.28.old/dot_parser.py pydot-1.0.28/dot_parser.py
--- pydot-1.0.28.old/dot_parser.py	2016-01-19 23:34:56.153627536 -0500
+++ pydot-1.0.28/dot_parser.py	2016-01-19 23:37:13.292375528 -0500
@@ -77,7 +77,7 @@
     for element in toks:
     
         if( isinstance(element, (ParseResults, tuple, list)) and
-            len(element) == 1 and isinstance(element[0], basestring) ):
+            len(element) == 1 and isinstance(element[0], str) ):
             
             element = element[0]
             
@@ -93,7 +93,7 @@
             
             top_graphs.append( g )
             
-        elif isinstance( element, basestring):
+        elif isinstance( element, str):
             g.set_name( element )
             
         elif isinstance(element, pydot.Subgraph):
@@ -112,7 +112,7 @@
             add_elements(g, element)
             
         else:
-            raise ValueError, "Unknown element statement: %r " % element
+            raise ValueError("Unknown element statement: %r " % element)
     
     
     for g in top_graphs:
@@ -137,10 +137,10 @@
         else:
             item_dict = g.obj_dict
             
-        if not item_dict.has_key( key_name ):
+        if key_name not in item_dict:
             continue
 
-        for key, objs in item_dict[key_name].items():
+        for key, objs in list(item_dict[key_name].items()):
             for obj in objs:
                 if 'parent_graph' in obj and obj['parent_graph'].get_parent_graph()==g:
                     if obj['parent_graph'] is g:
@@ -163,7 +163,7 @@
 def add_defaults(element, defaults):
 
     d = element.__dict__
-    for key, value in defaults.items():
+    for key, value in list(defaults.items()):
         if not d.get(key):
             d[key] = value
 
@@ -219,14 +219,14 @@
                 defaults_edge.update(element.attrs)
 
             else:
-                raise ValueError, "Unknown DefaultStatement: %s " % element.default_type
+                raise ValueError("Unknown DefaultStatement: %s " % element.default_type)
                 
         elif isinstance(element, P_AttrList):
         
             g.obj_dict['attributes'].update(element.attrs)
 
         else:
-            raise ValueError, "Unknown element statement: %r" % element
+            raise ValueError("Unknown element statement: %r" % element)
 
 
 def push_graph_stmt(str, loc, toks):            
@@ -268,7 +268,7 @@
     if default_type in ['graph', 'node', 'edge']:
         return DefaultStatement(default_type, attrs)
     else:
-        raise ValueError, "Unknown default statement: %r " % toks
+        raise ValueError("Unknown default statement: %r " % toks)
 
 
 def push_attr_list(str, loc, toks):
@@ -524,9 +524,9 @@
         else:
             return [g for g in tokens]
         
-    except ParseException, err:
+    except ParseException as err:
     
-        print err.line
-        print " "*(err.column-1) + "^"
-        print err
+        print(err.line)
+        print(" "*(err.column-1) + "^")
+        print(err)
         return None
Only in pydot-1.0.28.old/: PKG-INFO
diff -urP pydot-1.0.28.old/pydot.py pydot-1.0.28/pydot.py
--- pydot-1.0.28.old/pydot.py	2012-01-02 19:19:09.000000000 -0500
+++ pydot-1.0.28/pydot.py	2016-01-19 23:34:43.924739179 -0500
@@ -17,9 +17,10 @@
 Distributed under MIT license [http://opensource.org/licenses/mit-license.html].
 """
 
-__revision__ = "$LastChangedRevision: 28 $"
+__revision__ = "$LastChangedRevision$"
 __author__ = 'Ero Carrera'
-__version__ = '1.0.%d' % int( __revision__[21:-2] )
+#__version__ = '1.0.%d' % float( __revision__[21:-2] )
+__version__ = '1.0'
 __license__ = 'MIT'
 
 import os
@@ -29,8 +30,8 @@
 import copy
 try:
     import dot_parser
-except Exception, e:
-    print "Couldn't import dot_parser, loading of dot files will not be possible."
+except Exception as e:
+    print("Couldn't import dot_parser, loading of dot files will not be possible.")
     
 
 
@@ -92,7 +93,7 @@
 #
 class frozendict(dict):
     def _blocked_attribute(obj):
-        raise AttributeError, "A frozendict cannot be modified."
+        raise AttributeError("A frozendict cannot be modified.")
     _blocked_attribute = property(_blocked_attribute)
 
     __delitem__ = __setitem__ = clear = _blocked_attribute
@@ -105,7 +106,7 @@
         for arg in args:
             if isinstance(arg, dict):
                 arg = copy.copy(arg)
-                for k, v in arg.iteritems():
+                for k, v in list(arg.items()):
                     if isinstance(v, frozendict):
                         arg[k] = v
                     elif isinstance(v, dict):
@@ -132,7 +133,7 @@
         try:
             return self._cached_hash
         except AttributeError:
-            h = self._cached_hash = hash(tuple(sorted(self.iteritems())))
+            h = self._cached_hash = hash(tuple(sorted(self.items())))
             return h
 
     def __repr__(self):
@@ -190,7 +191,7 @@
             return 'True'
         return 'False'
 
-    if not isinstance( s, basestring ):
+    if not isinstance( s, str ):
         return s
 
     if not s:
@@ -200,7 +201,7 @@
         replace = {'"'  : r'\"',
                    "\n" : r'\n',
                    "\r" : r'\r'}
-        for (a,b) in replace.items():
+        for (a,b) in list(replace.items()):
             s = s.replace(a, b)
 
         return '"' + s + '"'
@@ -271,7 +272,7 @@
     return graph
 
 
-def graph_from_adjacency_matrix(matrix, node_prefix= u'', directed=False):
+def graph_from_adjacency_matrix(matrix, node_prefix= '', directed=False):
     """Creates a basic graph out of an adjacency matrix.
     
     The matrix has to be a list of rows of values
@@ -369,7 +370,7 @@
     
     if os.path.isdir(path) : 
     
-        for prg in progs.iterkeys():
+        for prg in list(progs.keys()):
     
             if progs[prg]:
                 continue
@@ -506,7 +507,7 @@
                             #print "Used Windows registry"
                             return progs
                 
-                except Exception, excp:
+                except Exception as excp:
                     #raise excp
                     pass
                 else:
@@ -516,7 +517,7 @@
 
     # Method 2 (Linux, Windows etc)
     #
-    if os.environ.has_key('PATH'):
+    if 'PATH' in os.environ:
     
         for path in os.environ['PATH'].split(os.pathsep):
             progs = __find_executables(path)
@@ -532,7 +533,7 @@
         # machine (might be on drive D:, or in a different language)
         #
         
-        if os.environ.has_key('PROGRAMFILES'):
+        if 'PROGRAMFILES' in os.environ:
         
             # Note, we could also use the win32api to get this
             # information, but win32api may not be installed.
@@ -717,7 +718,7 @@
 
 
 
-class Node(object, Common):
+class Node(Common):
     """A graph node.
     
     This class represents a graph's node with all its attributes.
@@ -756,12 +757,12 @@
             # Remove the compass point
             #
             port = None
-            if isinstance(name, basestring) and not name.startswith('"'):
+            if isinstance(name, str) and not name.startswith('"'):
                 idx = name.find(':')
                 if idx > 0 and idx+1 < len(name):
                     name, port = name[:idx], name[idx:]
 
-            if isinstance(name, (long, int)):
+            if isinstance(name, int):
                 name = str(name)
             
             self.obj_dict['name'] = quote_if_necessary( name )
@@ -812,7 +813,7 @@
 
         node_attr = list()
 
-        for attr, value in self.obj_dict['attributes'].iteritems():
+        for attr, value in list(self.obj_dict['attributes'].items()):
             if value is not None:
                 node_attr.append( '%s=%s' % (attr, quote_if_necessary(value) ) )
             else:
@@ -834,7 +835,7 @@
 
 
 
-class Edge(object,  Common ):
+class Edge(Common ):
     """A graph edge.
     
     This class represents a graph's edge with all its attributes.
@@ -925,7 +926,7 @@
         """
         
         if not isinstance(edge, Edge):
-            raise Error, "Can't compare and edge to a non-edge object."
+            raise Error("Can't compare and edge to a non-edge object.")
             
         if self.get_parent_graph().get_top_graph_type() == 'graph':
         
@@ -983,7 +984,7 @@
         
         if isinstance(src, frozendict):
             edge = [ Subgraph(obj_dict=src).to_string() ]
-        elif isinstance(src, (int, long)):
+        elif isinstance(src, int):
             edge = [ str(src) ]
         else:
             edge = [ src ]
@@ -999,7 +1000,7 @@
             
         if isinstance(dst, frozendict):
             edge.append( Subgraph(obj_dict=dst).to_string() )
-        elif isinstance(dst, (int, long)):
+        elif isinstance(dst, int):
             edge.append( str(dst) )
         else:
             edge.append( dst )
@@ -1007,7 +1008,7 @@
 
         edge_attr = list()
         
-        for attr, value in self.obj_dict['attributes'].iteritems():
+        for attr, value in list(self.obj_dict['attributes'].items()):
         
             if value is not None:
                 edge_attr.append( '%s=%s' % (attr, quote_if_necessary(value) ) )
@@ -1025,7 +1026,7 @@
     
     
     
-class Graph(object, Common):
+class Graph(Common):
     """Class representing a graph in Graphviz's dot language.
 
     This class implements the methods to work on a representation
@@ -1075,7 +1076,7 @@
             self.obj_dict['attributes'] = dict(attrs)
             
             if graph_type not in ['graph', 'digraph']:
-                raise Error, 'Invalid type "%s". Accepted graph types are: graph, digraph, subgraph' % graph_type
+                raise Error('Invalid type "%s". Accepted graph types are: graph, digraph, subgraph' % graph_type)
     
     
             self.obj_dict['name'] = quote_if_necessary(graph_name)
@@ -1311,7 +1312,7 @@
         if isinstance(name, Node):
             name = name.get_name()
         
-        if self.obj_dict['nodes'].has_key(name):
+        if name in self.obj_dict['nodes']:
         
             if index is not None and index < len(self.obj_dict['nodes'][name]):
                 del self.obj_dict['nodes'][name][index]
@@ -1336,7 +1337,7 @@
         
         match = list()
         
-        if self.obj_dict['nodes'].has_key(name):
+        if name in self.obj_dict['nodes']:
         
             match.extend( [ Node( obj_dict = obj_dict ) for obj_dict in self.obj_dict['nodes'][name] ])
         
@@ -1358,7 +1359,7 @@
         
         node_objs = list()
         
-        for node, obj_dict_list in self.obj_dict['nodes'].iteritems():
+        for node, obj_dict_list in list(self.obj_dict['nodes'].items()):
                 node_objs.extend( [ Node( obj_dict = obj_d ) for obj_d in obj_dict_list ] )
         
         return node_objs
@@ -1377,7 +1378,7 @@
 
         edge_points = ( graph_edge.get_source(), graph_edge.get_destination() )
 
-        if self.obj_dict['edges'].has_key(edge_points):
+        if edge_points in self.obj_dict['edges']:
 
             edge_list = self.obj_dict['edges'][edge_points]
             edge_list.append(graph_edge.obj_dict)
@@ -1411,7 +1412,7 @@
         """
 
         if isinstance( src_or_list, (list, tuple)):
-            if dst is not None and isinstance(dst, (int, long)):
+            if dst is not None and isinstance(dst, int):
                 index = dst
             src, dst = src_or_list
         else:
@@ -1423,7 +1424,7 @@
         if isinstance(dst, Node):
             dst = dst.get_name()
         
-        if self.obj_dict['edges'].has_key( (src, dst) ):
+        if (src, dst) in self.obj_dict['edges']:
         
             if index is not None and index < len(self.obj_dict['edges'][(src, dst)]):
                 del self.obj_dict['edges'][(src, dst)][index]
@@ -1455,8 +1456,8 @@
 
         match = list()
         
-        if self.obj_dict['edges'].has_key( edge_points ) or (
-            self.get_top_graph_type() == 'graph' and self.obj_dict['edges'].has_key( edge_points_reverse )):
+        if edge_points in self.obj_dict['edges'] or (
+            self.get_top_graph_type() == 'graph' and edge_points_reverse in self.obj_dict['edges']):
         
             edges_obj_dict = self.obj_dict['edges'].get(
                 edge_points,
@@ -1481,7 +1482,7 @@
         
         edge_objs = list()
         
-        for edge, obj_dict_list in self.obj_dict['edges'].iteritems():
+        for edge, obj_dict_list in list(self.obj_dict['edges'].items()):
                 edge_objs.extend( [ Edge( obj_dict = obj_d ) for obj_d in obj_dict_list ] )
         
         return edge_objs
@@ -1498,7 +1499,7 @@
         if not isinstance(sgraph, Subgraph) and not isinstance(sgraph, Cluster):
             raise TypeError('add_subgraph() received a non subgraph class object:' + str(sgraph))
             
-        if self.obj_dict['subgraphs'].has_key(sgraph.get_name()):
+        if sgraph.get_name() in self.obj_dict['subgraphs']:
         
             sgraph_list = self.obj_dict['subgraphs'][ sgraph.get_name() ]
             sgraph_list.append( sgraph.obj_dict )
@@ -1526,7 +1527,7 @@
         
         match = list()
         
-        if self.obj_dict['subgraphs'].has_key( name ):
+        if name in self.obj_dict['subgraphs']:
         
             sgraphs_obj_dict = self.obj_dict['subgraphs'].get( name )
         
@@ -1551,7 +1552,7 @@
         
         sgraph_objs = list()
         
-        for sgraph, obj_dict_list in self.obj_dict['subgraphs'].iteritems():
+        for sgraph, obj_dict_list in list(self.obj_dict['subgraphs'].items()):
                 sgraph_objs.extend( [ Subgraph( obj_dict = obj_d ) for obj_d in obj_dict_list ] )
         
         return sgraph_objs
@@ -1562,15 +1563,15 @@
     
         self.obj_dict['parent_graph'] = parent_graph
         
-        for obj_list in self.obj_dict['nodes'].itervalues():
+        for obj_list in list(self.obj_dict['nodes'].values()):
             for obj in obj_list:
                 obj['parent_graph'] = parent_graph
 
-        for obj_list in self.obj_dict['edges'].itervalues():
+        for obj_list in list(self.obj_dict['edges'].values()):
             for obj in obj_list:
                 obj['parent_graph'] = parent_graph
 
-        for obj_list in self.obj_dict['subgraphs'].itervalues():
+        for obj_list in list(self.obj_dict['subgraphs'].values()):
             for obj in obj_list:
                 Graph(obj_dict=obj).set_parent_graph(parent_graph)
 
@@ -1600,7 +1601,7 @@
             graph.append( '%s %s {\n' % (self.obj_dict['type'], self.obj_dict['name']) )
 
 
-        for attr in self.obj_dict['attributes'].iterkeys():
+        for attr in list(self.obj_dict['attributes'].keys()):
         
             if self.obj_dict['attributes'].get(attr, None) is not None:
        
@@ -1616,21 +1617,21 @@
         edges_done = set()
         
         edge_obj_dicts = list()
-        for e in self.obj_dict['edges'].itervalues():
+        for e in list(self.obj_dict['edges'].values()):
             edge_obj_dicts.extend(e)
             
         if edge_obj_dicts:
-            edge_src_set, edge_dst_set = zip( *[obj['points'] for obj in edge_obj_dicts] )
+            edge_src_set, edge_dst_set = list(zip( *[obj['points'] for obj in edge_obj_dicts] ))
             edge_src_set, edge_dst_set = set(edge_src_set), set(edge_dst_set)
         else:
             edge_src_set, edge_dst_set = set(), set()
             
         node_obj_dicts = list()
-        for e in self.obj_dict['nodes'].itervalues():
+        for e in list(self.obj_dict['nodes'].values()):
             node_obj_dicts.extend(e)
 
         sgraph_obj_dicts = list()
-        for sg in self.obj_dict['subgraphs'].itervalues():
+        for sg in list(self.obj_dict['subgraphs'].values()):
             sgraph_obj_dicts.extend(sg)
 
         
@@ -1837,7 +1838,7 @@
         graph is going to be rendered.
         """
         
-        if isinstance( file_paths, basestring ):
+        if isinstance( file_paths, str ):
             self.shape_files.append( file_paths )
             
         if isinstance( file_paths, (list, tuple) ):
@@ -1895,10 +1896,10 @@
         dot_fd = file(path, "w+b")
         if format == 'raw':
             data = self.to_string()
-            if isinstance(data, basestring):
-                if not isinstance(data, unicode):
+            if isinstance(data, str):
+                if not isinstance(data, str):
                     try:
-                        data = unicode(data, 'utf-8')
+                        data = str(data, 'utf-8')
                     except:
                         pass
                         
@@ -1952,7 +1953,7 @@
                 raise InvocationException(
                     'GraphViz\'s executables not found' )
                 
-        if not self.progs.has_key(prog):
+        if prog not in self.progs:
             raise InvocationException(
                 'GraphViz\'s executable "%s" not found' % prog )
             
@@ -2022,7 +2023,7 @@
                 'Program terminated with status: %d. stderr follows: %s' % (
                     status, stderr_output) )
         elif stderr_output:
-            print stderr_output
+            print(stderr_output)
         
         # For each of the image files...
         #
diff -urP pydot-1.0.28.old/setup.py pydot-1.0.28/setup.py
--- pydot-1.0.28.old/setup.py	2011-03-03 07:31:15.000000000 -0500
+++ pydot-1.0.28/setup.py	2016-01-19 23:34:43.924739179 -0500
@@ -2,7 +2,7 @@
 
 try:
     from distutils.core import setup
-except ImportError, excp:
+except ImportError as excp:
     from setuptools import setup
     
 import pydot
